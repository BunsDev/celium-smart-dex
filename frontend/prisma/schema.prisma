generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_DIRECT")
}

model User {
  id Int @id @default(autoincrement())

  address String @unique

  email                  String?                  @unique
  emailVerifiedAt        DateTime?
  emailVerificationToken EmailVerificationToken[]

  wallets Wallet[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmailVerificationToken {
  id Int @id @default(autoincrement())

  email String
  user  User   @relation(fields: [email], references: [email])

  token   String   @unique
  expires DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Chain {
  ANVIL
  SEPOLIA
  ARBITRUM_SEPOLIA
  BASE_SEPOLIA
  AVALANCHE_FUJI
  SCROLL_SEPOLIA
  POLYGON_AMOY
}

model Wallet {
  id Int @id @default(autoincrement())

  name                String
  address             String  @unique
  maxUSDAmountAllowed Int
  chain               Chain
  salt                Int
  isDeployed          Boolean @default(false)

  ownerId Int
  owner   User @relation(fields: [ownerId], references: [id])

  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, ownerId])
}

model Transaction {
  id Int @id @default(autoincrement())

  hash        String?
  target      String
  value       BigInt
  data        String
  nonce       BigInt
  pausedNonce BigInt?

  isPaused  Boolean @default(false)
  isSuccess Boolean @default(false)
  isFailed  Boolean @default(false)
  isIgnored Boolean @default(false)

  twoFactorCode String?

  walletId Int
  wallet   Wallet @relation(fields: [walletId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([walletId, nonce])
}
